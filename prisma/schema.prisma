// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int       @id @default(autoincrement())
  firstName            String
  lastName             String
  email                String    @unique
  password             String
  profileImage         String?
  profileImagePublicId String?
  phoneNumber          String
  address              String
  checkups             Checkup[]
  role                 Role      @default(PATIENT)
  orders               Order[]
  cart                 Cart?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

model Checkup {
  id        Int         @id @default(autoincrement())
  date      String
  type      CheckupType @default(EXAMINATION)
  User      User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model DailyDates {
  id        Int     @id @default(autoincrement())
  date      String  @unique
  available Boolean @default(true)
}

enum CheckupType {
  EXAMINATION
  CONSULTATION
}

enum Role {
  ADMIN
  MODERATOR
  PATIENT
}

// Ecommerce
model Product {
  id            Int         @id @default(autoincrement())
  name          String
  description   String
  price         Float
  stockQuantity Int
  category      Category?   @relation(fields: [categoryId], references: [id],onDelete: SetNull, onUpdate: Cascade)
  categoryId    Int?
  orderItems    OrderItem[]
  cartItems     CartItem[]
  productImage  String?
  productImagePublicId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
}

model Order {
  id         Int         @id @default(autoincrement())
  customerId Int
  customer   User        @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  date       DateTime    @default(now())
  items      OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Cart {
  id         Int        @id @default(autoincrement())
  customerId Int        @unique
  customer   User       @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  items      CartItem[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
